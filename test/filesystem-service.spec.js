// During the test the env variable is set to test
process.env.NODE_ENV = 'test';

import assert from 'node:assert/strict';
import fs from 'node:fs';
import path from 'node:path';
import { describe, it } from 'node:test';
import temp from 'temp';

import { readJson, writeJson } from '../lib/filesystem-service.js';

describe('filesystem-service', () => {
  describe('readJson', () => {
    it('should read json file generated by license-report', async () => {
      const testDataFile = path.resolve(
        'test',
        './test-data/license-report.json',
      );
      const result = await readJson(testDataFile);

      assert.ok(Array.isArray(result));
      assert.equal(
        result.length,
        13,
        `number of entries must be 13, but has ${result.length}`,
      );
      const numberOfProperties = Object.getOwnPropertyNames(result[1]).length;
      assert.equal(
        numberOfProperties,
        10,
        `entry 1 must have 10 properties, but has ${numberOfProperties}`,
      );
    });
  });

  describe('writeJson', () => {
    it('should write json file to temp directory', async () => {
      const testData = { data1: 'one', data2: 'two' };
      const targetFileName = temp.path({ suffix: '.json' });
      await writeJson(testData, targetFileName);

      const targetExists = fs.existsSync(targetFileName);
      assert.ok(targetExists, 'no file generated');
    });

    it('should throw without target filename', async () => {
      const testData = { data1: 'one', data2: 'two' };
      await assert.rejects(writeJson(testData), Error, 'Argument is required');
    });
  });
});
